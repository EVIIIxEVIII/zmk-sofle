#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    hml: hml {
        compatible = "zmk,behavior-hold-tap";
        label = "HML";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <130>;
        hold-trigger-key-positions = <7 8 9 10 11 12 20 21 22 23 24 25 33 38 46 47 48 49 50 51 59 60 61 62 63 0 1 13 14 15 16 17 18 26 31 39 40 42 43 44 53 54 55 56 57 0 1 2 3 4 5 13 14 15 16 17 18 26 31 39 40 42 43 44 52 53 54 55 56 57 42 41>;
        hold-trigger-on-release;
        hold-while-undecided;
        require-prior-idle-ms = <50>;
    };

    hmr: hmr {
        compatible = "zmk,behavior-hold-tap";
        label = "HMR";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <130>;
        flavor = "balanced";
        hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 26 31 39 40 41 42 43 44 52 53 54 55 56 57 50 51 60 61 62 63 7 8 9 10 11 12 20 21 22 23 24 25 33 38 46 47 48 49 50 51 59 60 61 62 63>;
        hold-trigger-on-release;
        hold-while-undecided;
        require-prior-idle-ms = <50>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        l_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <29 30>;
            timeout-ms = <50>;
        };

        l_sb {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <16 17>;
            timeout-ms = <50>;
        };

        l_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <42 43>;
            timeout-ms = <50>;
        };

        r_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <34 35>;
            timeout-ms = <50>;
        };

        r_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <21 22>;
            timeout-ms = <50>;
        };

        r_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <47 48>;
            timeout-ms = <50>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <29 28>;
            timeout-ms = <50>;
        };

        minus {
            bindings = <&kp KP_MINUS>;
            key-positions = <35 36>;
            timeout-ms = <50>;
        };

        plus {
            bindings = <&kp KP_PLUS>;
            key-positions = <22 23>;
            timeout-ms = <50>;
        };

        equal {
            bindings = <&kp KP_EQUAL>;
            key-positions = <15 16>;
            timeout-ms = <50>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <30 34>;
            timeout-ms = <75>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&none         &kp N1  &kp N2           &kp N3        &kp N4             &kp N5     &kp UP_ARROW     &kp N6     &kp N7              &kp N8                &kp N9            &kp N0    &kp TILDE
&kp CAPSLOCK  &kp Q   &kp W            &kp E         &kp R              &kp T      &kp DOWN_ARROW   &kp Y      &kp U               &kp I                 &kp O             &kp P     &kp BSLH
&none         &kp A   &hml LEFT_ALT S  &hml LCTRL D  &hml LEFT_SHIFT F  &kp G      &kp LEFT_ARROW   &kp H      &hmr RIGHT_SHIFT J  &hmr RIGHT_CONTROL K  &hmr RIGHT_ALT L  &kp SEMI  &kp APOS
&none         &kp Z   &kp X            &kp C         &kp V              &kp B      &kp RIGHT_ARROW  &kp N      &kp M               &kp COMMA             &kp DOT           &kp FSLH  &none
&kp C_MUTE    &none   &none            &mo 1         &kp SPACE          &kp ESC    &kp ENTER        &kp ENTER  &kp BACKSPACE       &kp TAB               &none             &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp GRAVE   &kp F1           &kp F2          &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6           &kp F7           &kp F8        &kp F9           &kp F10  &trans
&trans      &kp GRAVE        &mkp LCLK       &mkp MCLK        &mkp RCLK        &mkp MB4           &mmv MOVE_DOWN   &none            &none            &none         &none            &none    &none
&trans      &trans           &trans          &trans           &trans           &mkp MB5           &mmv MOVE_LEFT   &kp LEFT_ARROW   &kp DOWN_ARROW   &kp UP_ARROW  &kp RIGHT_ARROW  &none    &none
&trans      &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT    &kp F11          &kp F12  &trans
&kp C_MUTE  &trans           &trans          &trans           &trans           &trans             &mkp LCLK        &trans           &trans           &trans        &trans           &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&trans        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &kp F6  &kp F7          &kp F8        &kp F9       &kp F10       &trans
&out OUT_USB  &none         &none         &none         &none         &trans          &mmv MOVE_DOWN   &trans  &trans          &kp F11       &kp F12      &none         &kp PLUS
&out OUT_BLE  &none         &none         &none         &none         &trans          &mmv MOVE_LEFT   &none   &kp UNDERSCORE  &kp KP_EQUAL  &kp KP_PLUS  &kp KP_MINUS  &none
&trans        &none         &trans        &none         &trans        &trans          &mmv MOVE_RIGHT  &trans  &trans          &trans        &trans       &trans        &trans
&trans        &trans        &trans        &trans        &trans        &trans          &mkp LCLK        &trans  &trans          &trans        &trans       &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
